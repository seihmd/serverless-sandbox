// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/types.go

// Package mock_domain is a generated GoMock package.
package domain

import (
context "context"
messaging "firebase.google.com/go/messaging"
gomock "github.com/golang/mock/gomock"
reflect "reflect"
)

// MockMessageSender is a mock of MessageSender interface
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockMessageSender) Send(arg0 context.Context, arg1 []Message) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockMessageSenderMockRecorder) send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageSender)(nil).Send), arg0, arg1)
}

// MockResultRecorder is a mock of ResultRecorder interface
type MockResultRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockResultRecorderMockRecorder
}

// MockResultRecorderMockRecorder is the mock recorder for MockResultRecorder
type MockResultRecorderMockRecorder struct {
	mock *MockResultRecorder
}

// NewMockResultRecorder creates a new mock instance
func NewMockResultRecorder(ctrl *gomock.Controller) *MockResultRecorder {
	mock := &MockResultRecorder{ctrl: ctrl}
	mock.recorder = &MockResultRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResultRecorder) EXPECT() *MockResultRecorderMockRecorder {
	return m.recorder
}

// ErrorOccurred mocks base method
func (m *MockResultRecorder) ErrorOccurred(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorOccurred", arg0)
}

// ErrorOccurred indicates an expected call of ErrorOccurred
func (mr *MockResultRecorderMockRecorder) errorOccurred(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOccurred", reflect.TypeOf((*MockResultRecorder)(nil).ErrorOccurred), arg0)
}

// Completed mocks base method
func (m *MockResultRecorder) Completed(arg0 *messaging.BatchResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Completed", arg0)
}

// Completed indicates an expected call of Completed
func (mr *MockResultRecorderMockRecorder) completed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completed", reflect.TypeOf((*MockResultRecorder)(nil).Completed), arg0)
}
